var buffer: []u8 = undefined;
var strBuffer: []u8 = undefined;

const Channel = struct {
  serverID:[]u8, ///to add as property in event hostory
  connected:bool,
  host:[]u8,
  port:[]u8,
  state:[3]i32,
  
  pub fn connect(self:*Channel, url:[]const u8, appId:i32) bool {
    const srv = getServer(serverID);
    self.port = getPort(url);
    self.host = getPort(url);
    self.connected = false;
    self.state[0] = 0;
    
    if(mem.eq(u8, srv.port, @constCast(self.port))
       && mem.eq(u8, srv.host, @constCast(self.host))) {
      if(srv.appId == appId) {
        if(!(appId > 1 && self.state[0] == 0)){
          self.connected = true;
          self.state[appId-1]=1;
        }
      }
    }
    return self.connected;
  }
  
  pub fn asHistoryChannel(self:Channel) HistoryChannel {
    var chan = HistoryChannel{};
    chan.channel = self;
    return chan;
  }
  
  pub fn asFlowChannel(self:Channel) FlowChannel {
    var chan = FlowChannel{};
    chan.channel = self;
    return chan;
  }
  
  pub fn asPlotChannel(self:Channel) PlotChannel {
    var chan = PlotChannel{};
    chan.channel = self;
    return chan;
  }
  
  pub fn asRepository(self:Channel) Repository {
    var chan = Repository{};
    chan.channel = self;
    return chan;
  }
}

const HistoryChannel = struct {
  channel: Channel,
  data: List(Strings),
  
  pub fn new(data:List(Strings)) HistoryChannel {
    return HistoryChannel {
      .data = data,
    };
  }
  
  pub fn connect(self:*HistoryChannel, url:[]const u8) void {
    self.channel.connect(url, 1);
  }
  
  pub fn save(self:*HistoryChannel, msg:[]const u8) !void {    
    try saveWriterString(self, history, msg);
  }
  
  pub fn asFlow(self:*HistoryChannel) void {
    self.channel.serverID == 2;
  }
  
  pub fn asPlot(self:*HistoryChannel) void {
    self.channel.serverID == 3;
  }
}  

fn saveWriterString(obj:anytype, filepath:[]const u8, result:[]const u8) !void {
  try Reader.read(filepath, &buffer);
  obj.data = json.parseJson(buffer);
  const len = self.data.len;
  self.data.items[len] = Strings.new(result);
    
  const jsonData = json.stringify(self.data.items);
    
  file.write(filepath, jsonData);
  buffer = undefined;
}



