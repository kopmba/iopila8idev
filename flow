const Datagram = struct {
  id:i32,
  channel: Channel,
  
  pub fn connect(self:*Datagram, baseUrl:[]u8) void {
    const fchannel = self.channel.asFlowChannel();
    fchannel.connect(baseUrl);
  }
  
  pub fn disconnect(self:*Datagram) void {
    self.channel.connected = false;
    self.channel.state[0]=0;
  }
  
  pub fn lock(self:*Datagram, k:[]const u8) void {
    const repo = self.channel.asRepository();
    const list = repo.get();
    const consumer = self.read(k);
    var i = 0;
    while(i < list.len) {
      if(Strings.new(list[i].type.originalUrl).contains(k)
        && mem.eq(u8, consumer.status, @constCast("xxxx"))) {
        list[i].status = "lock";
        i=list.len;
      }
      i=i+1;
    }
  }
  
  pub fn unlock(self:*Datagram, k:[]const u8) void {
    const repo = self.channel.asRepository();
    const list = repo.get();
    const consumer = self.read(k);
    var i = 0;
    while(i < list.len) {
      if(Strings.new(list[i].type.originalUrl).contains(k)
        && mem.eq(u8, list[i].status, @constCast("lock"))
        && mem.eq(u8, consumer.status, @constCast("updated"))) {
        list[i].status = "unlock";
        i=list.len;
      }
      i=i+1;
    }
  }
  
  pub fn register(self:*Datagram, c:Consumer) void {
    const dchannel = channel.asFlowChannel().asDatagramChannel();
    dchannel.add(c);
  }
  
  pub fn keys(self:*Datagram) List(Strings) {
    const dchannel = channel.asFlowChannel().asDatagramChannel();
    const list = dchannel.get();
    var allkeys = List(Strings);
    allkeys.items = &buffer;
    var i=0;
    while(i<list.len) {
      allkeys.items[allkeys.len] = list[i].key;
      i=i+1;
    }
    return allkeys;
  }
  
  pub fn write(self:*Datagram, k:[] const u8, data:[]const u8) void {
    const dchannel = channel.asFlowChannel().asDatagramChannel();
    dchannel.edit(k, data);
  }
  
  pub fn read(self:*Datagram, k:[]const u8) Consumer {
    const dchannel = channel.asFlowChannel().asDatagramChannel();
    return dchannel.getKey(k);
  }
}
